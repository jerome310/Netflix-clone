{"version":3,"sources":["axios.js","Row.js","requests.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","console","table","className","map","movie","src","poster_path","alt","name","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQASeA,E,OALEC,EAAMC,OAAO,CAC1BC,QAAS,iCCkCEC,MAlCf,YAAmC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EACJC,mBAAS,IADL,mBACzBC,EADyB,KACjBC,EADiB,KAmBhC,OAfAC,qBAAU,WAAM,4CAEd,4BAAAC,EAAA,sEACwBV,EAAMW,IAAIN,GADlC,cACQO,EADR,OAKEJ,EAAUI,EAAQC,KAAKC,SALzB,kBAMSF,GANT,4CAFc,0DAUdG,KACC,CAACV,IAEJW,QAAQC,MAAMV,GAGZ,sBAAKW,UAAU,MAAf,UAEE,6BAAKd,IAEL,qBAAKc,UAAU,eAAf,SAEGX,EAAOY,KAAI,SAACC,GAAD,OACV,qBAAKC,IAAG,UA7BD,wCA6BC,OAAgBD,EAAME,aAAeC,IAAKH,EAAMI,gBChC5DC,EAAU,mCAaDC,EAXE,CACfC,cAAc,8BAAD,OAAgCF,EAAhC,mBACbG,sBAAsB,wBAAD,OAA0BH,EAA1B,sBACrBI,cAAc,4BAAD,OAA8BJ,EAA9B,mBACbK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,kBAAkB,2BAAD,OAA6BP,EAA7B,mBACjBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,sBAClBS,mBAAmB,2BAAD,OAA6BT,EAA7B,oBCILU,MAVf,WACE,OACE,sBAAKjB,UAAU,MAAf,UACE,qDACA,cAAC,EAAD,CAAKd,MAAM,oBAAoBC,SAAUqB,EAASE,wBAClD,cAAC,EAAD,CAAKxB,MAAM,eAAeC,SAAUqB,EAASC,oBCGpCS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9b9f3387.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// base url to make requests to the movie database\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3',\r\n});\r\n\r\n// instance variable will allow us to append a get request when we send one to this variable\r\nexport default instance; ","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"./axios\";\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\r\n\r\nfunction Row({ title, fetchUrl }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  // A snippet of code which runs based on a specific condition/variable\r\n  useEffect(() => {\r\n    // if brackets aka [] is blank run code once and dont run it again\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      // This async variable is creating a request to grab axios url and combine it with the Row props inside app.js... which is NETFLIX ORIGINALS & TRENDING NOW: â†“\r\n      //'https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213'\r\n      //   console.log(request.data.results);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  console.table(movies);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      {/* title */}\r\n      <h2>{title}</h2>\r\n      {/* container -> posters */}\r\n      <div className=\"row__posters\">\r\n        {/* row__posters  */}\r\n        {movies.map((movie) => (\r\n          <img src={`${base_url}${movie.poster_path}`} alt={movie.name} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = \"0886ec0cdb036b7f0a823254454c484b\";\r\n\r\nconst requests = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n};\r\n\r\nexport default requests;\r\n","import \"./App.css\";\nimport Row from \"./Row\";\nimport requests from \"./requests\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello Netflix Clone</h1>\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} />\n      <Row title=\"TRENDING NOW\" fetchUrl={requests.fetchTrending} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}